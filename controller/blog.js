// Generated by CoffeeScript 1.10.0
(function() {
  var Blog, Perpage, converter, env, expressValidator, html, mongoose, postPre, sanitizeHtml, settings, showdown;

  Blog = require('../model/Blog');

  mongoose = require('mongoose');

  settings = require('../routes/settings');

  showdown = require('showdown');

  converter = new showdown.Converter();

  expressValidator = require('express-validator');

  env = require('node-jsdom').env;

  sanitizeHtml = require('sanitize-html');

  Perpage = settings.perPageBlogSize;

  html = "<html><body></body></html>";

  postPre = function(req, res, cb) {
    var blogHtml, content, contentBegin, date, errows, i, img, imgs, ip, j, tags, title;
    req.assert('text', 'Content should not be empty！').notEmpty();
    req.assert('title', 'Title should not be empty！').notEmpty();
    errows = req.validationErrors();
    if (errows) {
      res.json({
        err: errows,
        success: false
      });
    } else {
      content = req.body.text;
      title = req.body.title;
      tags = [];
      for (i = j = 1; j <= 3; i = ++j) {
        tags.push({
          tag: req.body['tag' + i.toString()],
          id: i
        });
      }
      console.log(tags);
      imgs = [];
      blogHtml = converter.makeHtml(content);
      img = '';
      contentBegin = '';
      blogHtml = sanitizeHtml(blogHtml, {
        allowedTags: ['a', 'p', 'pre', 'ul', 'li', 'em', 'b', 'i'],
        allowedAttributes: {
          'a': ['href']
        }
      });
      date = new Date();
      ip = req.ip;
      cb(content, blogHtml, title, tags, imgs, contentBegin, img, date, ip);
    }
  };

  exports.blogAll = function(req, res) {
    return Blog.returnAllBlog(function(err, blogs) {
      var posts;
      posts = [];
      if (err) {
        return console.log(blogs[0].contentBegin.toString());
      } else {
        blogs.forEach(function(post, i) {
          return posts.push({
            id: post._id,
            title: post.title,
            text: (post.content.substr(0, 50)) + '...'
          });
        });
        return res.json({
          posts: blogs
        });
      }
    });
  };

  exports.blogPerpage = function(req, res) {
    return Blog.returnPerpageBlogIndex(Perpage, function(err, blogs, count) {
      if (err) {
        blogs = [];
      }
      return res.render('blog/bloglist', {
        title: settings.titles.blog_bloglist,
        posts: blogs,
        OnlyOnePage: count <= Perpage,
        user: req.session.user
      });
    });
  };

  exports.getBlogPerpage = function(req, res) {
    var page;
    page = parseInt(req.query.page);
    return Blog.returnPerpageBlog(Perpage, page, function(err, blogs, count) {
      var isLastPage;
      if (err) {
        return res.json({
          success: false,
          info: 'fail to get！'
        });
      } else {
        isLastPage = ((page - 1) * Perpage + blogs.length) === count;
        return res.json({
          total: count,
          success: true,
          blogs: blogs,
          isLastPage: isLastPage
        });
      }
    });
  };

  exports.perBlog = function(req, res) {
    var id;
    id = req.params.id;
    Blog.updateBlogPv(id);
    return Blog.returnBlogById(id, function(err, blog) {
      var post;
      if (err) {
        blog = {};
      }
      post = {};
      post.title = blog.title;
      post.text = blog.content;
      blog.content = converter.makeHtml(blog.content);
      post.html = blog.content;
      post.blogid = req.params.id;
      return res.json({
        post: post
      });
    });
  };

  exports.postView = function(req, res) {
    var count, tags;
    count = 1;
    tags = [];
    while (count < 4) {
      tags.push({
        tag: '',
        id: count
      });
      count++;
    }
    return res.render('blog/post', {
      title: settings.titles.blog_post,
      user: req.session.user,
      blog: new Blog({
        tags: tags,
        content: ''
      }),
      action: "post"
    });
  };

  exports.post = function(req, res) {
    return postPre(req, res, function(content, blogHtml, title, tags, imgs, contentBegin, date, ip) {
      var blog;
      blog = new Blog({
        content: content,
        title: title,
        contentBegin: contentBegin,
        blogHtml: blogHtml,
        tags: tags,
        imgs: imgs,
        user: req.session.user,
        date: date,
        time: {
          year: date.getFullYear(),
          month: date.getFullYear() + "-" + (date.getMonth() + 1),
          day: date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate(),
          minute: date.getHours() + ':' + date.getMinutes()
        },
        ip: ip
      });
      return blog.save(function(err) {
        if (err != null) {
          console.log('emodoou_text:error');
          res.json({
            success: false,
            err: err
          });
        } else {
          console.log('emodoou_text:sucess');
        }
        return res.redirect('/index');
      });
    });
  };

  exports.editBlogView = function(req, res) {
    var id;
    id = mongoose.Types.ObjectId(req.params.id);
    return Blog.findById(id, null, function(err, doc) {
      var count, len;
      count = 1;
      len = doc.tags.length;
      while (count < 4 - len) {
        doc.tags.push({
          tag: ''
        });
        count++;
      }
      return res.render('blog/post', {
        title: settings.titles.blog_edit,
        blog: doc,
        user: req.session.user,
        action: "editblog"
      });
    });
  };

  exports.editBlog = function(req, res) {
    var id;
    id = req.params.id;
    return postPre(req, res, function(content, blogHtml, title, tags, imgs, contentBegin, img, date, ip) {
      var blog;
      blog = {
        content: content,
        title: title,
        contentBegin: contentBegin,
        tags: tags,
        blogHtml: blogHtml,
        img: {
          px600: img.replace('px1366', 'px600'),
          px200: img.replace('px1366', 'px200'),
          original: img.replace('px1366', ''),
          px1366: img
        },
        imgs: imgs
      };
      return Blog.update({
        _id: id
      }, {
        $set: blog,
        $push: {
          "editDate": {
            date: date,
            ip: ip
          }
        }
      }, function(err, num, row) {
        if (err && num === 0) {
          return res.json({
            success: false
          });
        } else {
          return res.redirect('/blog');
        }
      });
    });
  };

  exports.viewIndex = function(req, res) {
    return Blog.returnView(null, null, function(err, monthBlogs) {
      if (err) {
        monthBlogs = [];
      }
      return res.render("blog/view", {
        title: settings.titles.blog_view,
        MonthBlogs: monthBlogs,
        user: req.session.user
      });
    });
  };

  exports.deleteBlog = function(req, res) {
    var id;
    id = req.query.id;
    console.log(id);
    return Blog.remove({
      _id: id
    }).exec(function(err) {
      if (err) {
        return res.json({
          success: false
        });
      } else {
        return res.json({
          success: true
        });
      }
    });
  };

  exports.setTop = function(req, res) {
    var id, istop;
    istop = false;
    id = req.query.id;
    if (req.query.istop === 'true') {
      istop = true;
    }
    return Blog.update({
      _id: id
    }, {
      $set: {
        isTop: istop
      }
    }).exec(function(err) {
      if (err) {
        return res.json({
          success: false
        });
      } else {
        return res.json({
          success: true
        });
      }
    });
  };

}).call(this);
